/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hexlet.code;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

class AppTest {
    private static String resultJson;
    private static String resultPlain;
    private static String resultStylish;
    private  final String pathToDirectory = "src/test/resources/";

    private static Path getFixturePath(String fileName) {
        return Paths.get("src", "test", "resources", "fixtures", fileName)
                .toAbsolutePath().normalize();
    }

    private static String readFixture(String fileName) throws Exception {
        Path filePath = getFixturePath(fileName);
        return Files.readString(filePath).trim();
    }

    // Побочные эффекты правильно делать не на уровне класса, а внутри хуков
    @BeforeAll
    public static void beforeAll() throws Exception {
        resultJson = readFixture("result_json.json");
        resultPlain = readFixture("result_plain.txt");
        resultStylish = readFixture("result_stylish.txt");
    }

    @Test
    public void testJsonDefault() throws Exception {

        var filePath1 = pathToDirectory + "file1.json";
        var filePath2 = pathToDirectory + "file2.json";
        String actual = Differ.generate(filePath1, filePath2);
        String expected = resultStylish;
        assertThat(actual).isEqualTo(expected);

    }
    @Test
    public void testJsonWithPlain() throws Exception {

        var filePath1 = pathToDirectory + "file1.json";
        var filePath2 = pathToDirectory + "file2.json";
        String actual = Differ.generate(filePath1, filePath2, "plain");
        String expected = resultPlain;
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testJsonWithStylish() throws Exception {

        var filePath1 = pathToDirectory + "file1.json";
        var filePath2 = pathToDirectory + "file2.json";
        String actual = Differ.generate(filePath1, filePath2, "stylish");
        String expected = resultStylish;
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testJsonWithJson() throws Exception {

        var filePath1 = pathToDirectory + "file1.json";
        var filePath2 = pathToDirectory + "file2.json";
        String actual = Differ.generate(filePath1, filePath2, "json");
        String expected = resultJson;
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testYmlWithDefault() throws Exception {

        var filePath1 = pathToDirectory + "file1.yml";
        var filePath2 = pathToDirectory + "file2.yml";
        String actual = Differ.generate(filePath1, filePath2);
        String expected = resultStylish;
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testYmlWithPlain() throws Exception {

        var filePath1 = pathToDirectory + "file1.yml";
        var filePath2 = pathToDirectory + "file2.yml";
        String actual = Differ.generate(filePath1, filePath2, "plain");
        String expected = resultPlain;
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testYmlWithStylish() throws Exception {

        var filePath1 = pathToDirectory + "file1.yml";
        var filePath2 = pathToDirectory + "file2.yml";
        String actual = Differ.generate(filePath1, filePath2, "stylish");
        String expected = resultStylish;
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testYmlWithJson() throws Exception {

        var filePath1 = pathToDirectory + "file1.yml";
        var filePath2 = pathToDirectory + "file2.yml";
        String actual = Differ.generate(filePath1, filePath2, "json");
        String expected = resultJson;
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testGetDataFormatYml() {

        var filePath1 = pathToDirectory + "file1.yml";
        String actual = FileUtils.getDataFormat(filePath1);
        String expected = "yml";
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testGetDataFormatJson() {

        var filePath1 = pathToDirectory + "file1.json";
        String actual = FileUtils.getDataFormat(filePath1);
        String expected = "json";
        assertThat(actual).isEqualTo(expected);

    }

}
