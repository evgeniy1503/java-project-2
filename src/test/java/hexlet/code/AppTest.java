/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hexlet.code;

import com.fasterxml.jackson.core.JsonProcessingException;
import hexlet.code.formatter.Json;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Map;
import java.util.TreeMap;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

class AppTest {

    private  final String pathToDirectory = "src/test/resources/";
    private  final String pathToDirectoryResult = "src/test/resources/result/";


    @Test
    public void testDiff() throws Exception {

        var filePath1 = pathToDirectory + "file1.json";
        var filePath2 = pathToDirectory + "file2.json";
        String actual = Differ.generate(filePath1, filePath2);
        String expected = Files.readString(Path.of(pathToDirectoryResult + "result_test.txt"));
        assertThat(actual).isEqualTo(expected);

    }
    @Test
    public void testDiffEmptyJson() throws Exception {

        var filePath1 = pathToDirectory + "file_Empty_1.json";
        var filePath2 = pathToDirectory + "file_Empty_2.json";
        String actual = Differ.generate(filePath1, filePath2, "stylish");
        String expected = Files.readString(Path.of(pathToDirectoryResult + "result_test_empty.txt"));
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testDiffYml() throws Exception {

        var filePath1 = pathToDirectory + "file1.yml";
        var filePath2 = pathToDirectory + "file2.yml";
        String actual = Differ.generate(filePath1, filePath2, "stylish");
        String expected = Files.readString(Path.of(pathToDirectoryResult + "result_test.txt"));
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testDiffEmptyYml() throws Exception {

        var filePath1 = pathToDirectory + "file_Empty_1.yml";
        var filePath2 = pathToDirectory + "file_Empty_2.yml";
        String actual = Differ.generate(filePath1, filePath2, "stylish");
        String expected = Files.readString(Path.of(pathToDirectoryResult + "result_test_empty.txt"));
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testDiffStylishJson() throws Exception {

        var filePath1 = pathToDirectory + "file3.json";
        var filePath2 = pathToDirectory + "file4.json";
        String actual = Differ.generate(filePath1, filePath2, "stylish");
        String expected = Files.readString(Path.of(pathToDirectoryResult + "result_DiffStylish.txt"));
        assertThat(actual).isEqualTo(expected);

    }
    @Test
    public void testDiffStylishYml() throws Exception {

        var filePath1 = pathToDirectory + "file3.yml";
        var filePath2 = pathToDirectory + "file4.yml";
        String actual = Differ.generate(filePath1, filePath2, "stylish");
        String expected = Files.readString(Path.of(pathToDirectoryResult + "result_DiffStylish.txt"));
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testReadFile() throws Exception {

        var filePath1 = pathToDirectory + "file1.json";
        String actual = ReadFile.readFile(filePath1);
        String expected = Files.readString(Path.of(pathToDirectoryResult + "result_test_readFile.txt"));
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testGetExtensionFile() throws Exception {

        var filePath1 = pathToDirectory + "file1.json";
        String actual = ReadFile.getExtensionFile(filePath1);
        String expected = "json";
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testDiffPlain() throws Exception {

        var filePath1 = pathToDirectory + "file3.json";
        var filePath2 = pathToDirectory + "file4.json";
        String actual = Differ.generate(filePath1, filePath2, "plain");
        String expected = Files.readString(Path.of(pathToDirectoryResult + "result_test_DiffPlain.txt"));
        assertThat(actual).isEqualTo(expected);
    }
    @Test
    public void testDiffJson() throws Exception {

        var filePath1 = pathToDirectory + "file1.json";
        var filePath2 = pathToDirectory + "file2.json";
        String actual = Differ.generate(filePath1, filePath2, "json");
        String expected = Files.readString(Path.of(pathToDirectoryResult + "result_DiffJson.json"));
        assertThat(actual).isEqualTo(expected);
    }

    @Test
    public void testMakeJson() throws IOException {

        Map<String, Item> date = new TreeMap<>();
        date.put("Dog", new Item("Djek", "Hatico", "deleted"));
        date.put("Cat", new Item("Fill", "Sharik", "added"));
        var actual = Json.makeJson(date);
        var expected = Files.readString(Path.of(pathToDirectoryResult + "result_makeJson.txt"));
        assertThat(actual).isEqualTo(expected);

    }


}
