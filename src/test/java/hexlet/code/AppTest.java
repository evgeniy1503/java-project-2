/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hexlet.code;

import hexlet.code.formatter.Json;
import hexlet.code.formatter.Plain;
import hexlet.code.formatter.Stylish;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Map;
import java.util.TreeMap;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

class AppTest {

    private  final String pathToDirectory = "src/test/resources/";
    private  final String pathToDirectoryResult = "src/test/resources/result/";

    @Test
    public void testJsonDefault() throws Exception {

        var filePath1 = pathToDirectory + "file1.json";
        var filePath2 = pathToDirectory + "file2.json";
        String actual = Differ.generate(filePath1, filePath2);
        String expected = Files.readString(Path.of(pathToDirectoryResult + "result_formatJsonDefault.txt"));
        assertThat(actual).isEqualTo(expected);

    }
    @Test
    public void testJsonWithPlain() throws Exception {

        var filePath1 = pathToDirectory + "file1.json";
        var filePath2 = pathToDirectory + "file2.json";
        String actual = Differ.generate(filePath1, filePath2, "plain");
        String expected = Files.readString(Path.of(pathToDirectoryResult + "formatJsonWithPlain.txt"));
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testJsonWithStylish() throws Exception {

        var filePath1 = pathToDirectory + "file1.json";
        var filePath2 = pathToDirectory + "file2.json";
        String actual = Differ.generate(filePath1, filePath2, "stylish");
        String expected = Files.readString(Path.of(pathToDirectoryResult + "result_formatJsonDefault.txt"));
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testJsonWithJson() throws Exception {

        var filePath1 = pathToDirectory + "file1.json";
        var filePath2 = pathToDirectory + "file2.json";
        String actual = Differ.generate(filePath1, filePath2, "json");
        String expected = Files.readString(Path.of(pathToDirectoryResult + "formatJsonWithJson.json"));
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testYmlWithDefault() throws Exception {

        var filePath1 = pathToDirectory + "file3.yml";
        var filePath2 = pathToDirectory + "file4.yml";
        String actual = Differ.generate(filePath1, filePath2);
        String expected = Files.readString(Path.of(pathToDirectoryResult + "testYmlWithDefault.txt"));
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testYmlWithPlain() throws Exception {

        var filePath1 = pathToDirectory + "file1.yml";
        var filePath2 = pathToDirectory + "file2.yml";
        String actual = Differ.generate(filePath1, filePath2, "plain");
        String expected = Files.readString(Path.of(pathToDirectoryResult + "formatJsonWithPlain.txt"));
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testYmlWithStylish() throws Exception {

        var filePath1 = pathToDirectory + "file1.yml";
        var filePath2 = pathToDirectory + "file2.yml";
        String actual = Differ.generate(filePath1, filePath2, "stylish");
        String expected = Files.readString(Path.of(pathToDirectoryResult + "result_formatJsonDefault.txt"));
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testYmlWithJson() throws Exception {

        var filePath1 = pathToDirectory + "file1.yml";
        var filePath2 = pathToDirectory + "file2.yml";
        String actual = Differ.generate(filePath1, filePath2, "json");
        String expected = Files.readString(Path.of(pathToDirectoryResult + "formatJsonWithJson.json"));
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testGetDataFormatYml() {

        var filePath1 = pathToDirectory + "file1.yml";
        String actual = FileUtils.getDataFormat(filePath1);
        String expected = "yml";
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testGetDataFormatJson() {

        var filePath1 = pathToDirectory + "file1.json";
        String actual = FileUtils.getDataFormat(filePath1);
        String expected = "json";
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testFormatterStylish() throws IOException {

        Map<String, Item> map = new TreeMap<>();
        map.put("Russia", new Item("Moscow", "added"));
        map.put("Japan", new Item("Tokio", "deleted"));
        map.put("USA", new Item("Washington", "unchanged"));
        String actual = Stylish.makeStylish(map);
        String expected = Files.readString(Path.of(pathToDirectoryResult + "testFormatterStylish.txt"));
        assertThat(actual).isEqualTo(expected);

    }

    @Test
    public void testFormatterPlain() throws IOException {

        Map<String, Item> map = new TreeMap<>();
        map.put("Russia", new Item("Moscow", "added"));
        map.put("Japan", new Item("Tokio", "deleted"));
        map.put("USA", new Item("Washington", "unchanged"));
        String actual = Plain.makePlain(map);
        String expected = Files.readString(Path.of(pathToDirectoryResult + "testFormatterPlain.txt"));
        assertThat(actual).isEqualTo(expected);

    }
    @Test
    public void testFormatterJson() throws IOException {

        Map<String, Item> map = new TreeMap<>();
        map.put("Russia", new Item("Moscow", "added"));
        map.put("Japan", new Item("Tokio", "deleted"));
        map.put("USA", new Item("Washington", "unchanged"));
        String actual = Json.makeJson(map);
        String expected = Files.readString(Path.of(pathToDirectoryResult + "testFormatterJson.json"));
        assertThat(actual).isEqualTo(expected);

    }



}
